var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Observable } from 'rxjs/Rx';
import './rxjs';
import { Injectable } from '@angular/core';
import { Http, Headers, RequestOptions } from '@angular/http';
let Api = class Api {
    // NOTE:
    // The way Observables work within Angular, is that an Observable
    // HTTP request doesn't get fired off until something subscribes to
    // the Observable via the `.subscribe(...)` method. This means that
    // if you have multiple subscribers within your app, you'll get
    // duplicate requests. To avoid this, we can 'cache' the Observable,
    // and by checking if the 'cached' version is already set, we simply
    // return that cached version.
    constructor(_http) {
        this._http = _http;
    }
    get(requestUrl, additionalHeaders) {
        const rawHeaders = {
            'Content-Type': 'application/json'
        };
        additionalHeaders = additionalHeaders || {};
        const headers = new Headers(Object.assign(rawHeaders, additionalHeaders));
        const options = new RequestOptions({ headers: headers });
        // Send the HTTP get request
        return this._http.get(requestUrl, options)
            .map(this._extractData)
            .catch(this._handleError)
            .share();
    }
    /**
     * POSTs a request to the given url with the given JSON data
     * @param url
     * @param data
     */
    post(requestUrl, data, additionalHeaders) {
        const body = JSON.stringify(data);
        const rawHeaders = {
            'Content-Type': 'application/json'
        };
        additionalHeaders = additionalHeaders || {};
        const headers = new Headers(Object.assign(rawHeaders, additionalHeaders));
        const options = new RequestOptions({ headers: headers });
        return this._http.post(requestUrl, body, options)
            .map(this._extractData)
            .catch(this._handleError)
            .share();
    }
    _extractData(response) {
        let body = null;
        try {
            body = response.json();
        }
        catch (err) {
            // HACK: response.json() appears to fail when handling primitives
            // returned in the response._body. In that case, simply return
            // the value in the _body.
            if (response['_body']) {
                return response['_body'];
            }
            console.warn('Attempting to deserialize response into JSON failed. The object could be empty.', err);
        }
        return body || {};
    }
    _handleError(error) {
        // In a real world app, we might use a remote logging infrastructure
        // We'd also dig deeper into the error to get a better message
        const errMsg = (error.message) ? error.message :
            error.status ? `${error.status} - ${error.statusText}` : 'Server error';
        console.error(errMsg); // log to console instead
        return Observable.throw(errMsg);
    }
};
Api = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Http])
], Api);
export { Api };
//# sourceMappingURL=index.js.map